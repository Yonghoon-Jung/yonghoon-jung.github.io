---
title: "Swift 기초 문법"
layout: post
date: 2021-02-13 19:43
image: /assets/images/Swift.jpg
headerImage: true
tag:
- Swift
- Grammer
- 문법
category: blog
star: true
author: Yonghoon-Jung
description: Markdown summary with different options
---

## Summary:
Swift언어의 기초 문법을 정리해 놓음으로 문법에 대한 접근이 용이하도록 작성한 게시글입니다.<br>
This is a posting that summarizes the basic grammar of the Swift language to facilitate access to grammar.

#### Table of Contents
- [Grammer](#grammer) 문법
- [Parameters](#parameters) 매개변수
- [Four-Fundamental-Rules-Of-Arithmetics](#four-fundamental-rules-of-arithmetics) 가감승제
- [Method](#method) 함수
- [Inout](#inout) 인아웃

#### External Elements
- [Gist](#gist)
- [Codepen](#codepen)
- [Slideshare](#slideshare)
- [Videos](#videos)

---

## Grammer

#### Table of Contents
- [Swift](#swift) 문법
- [Int](#int) 정수형 데이터 타입
- [Double](#double) 부동소수점 데이터 타입
- [Bool](#bool) 부울 데이터 타입
- [Character](#character) 문자 데이터 타입
- [String](#string) 문자열 데이터 타입
- [EscapeSequence](#escapesequence) 특수 문자 / 이스케이프 시스
- [Var](#var) 변수
- [Let](#let) 상수
- [Var-Let](#var-let) 변수 및 상수 선언
- [Tuple](#tuple) 튜플
- [Optional](#optional) 옵셔널

#### Swift

<span class="grammer">A powerful open language that lets everyone build amazing apps.<br>
누구나 놀라운 앱을 만들 수 있게 해주는 강력한 개방형 언어.</span>

{% highlight html %}
Apple WWDC 2014에서 공개된 프로그래밍 언어입니다.
Swift는 다음과 같이 코드의 표현력을 높이기 위한 다른 많은 기능을 제공합니다.
- 함수 포인터와 통합된 클로저
- 튜플 및 멀티플 반환 값
- 제네릭
- 범위 또는 컬렉션에서의 빠르고 간결한 반복
- 메소드, 확장 프로그램 및 프로토콜을 지원하는 구조
- 함수형 프로그래밍 패턴 (예: map 및 filter)
- try/catch/throw를 사용한 기본 오류 처리
{% endhighlight %}
{% highlight html %}
 Swift와 Objective-C의 관계
 많은 사람들이 Objective-C를 이제 묻혀질 언어로만 생각하고 있지만, 의외로 그렇지 않습니다.

 Swift 프로젝트에서도 Objective-C는 아무런 제약 없이 사용 가능합니다. 
 Swift의 컴파일러 백엔드와 Objective-C의 컴파일러 백엔드는 둘다 LLVM으로 동일하며, 어떤 언어를 사용해서 코드를 작성하더라도 같은 형태의 중간언어로 번역되어 컴파일 됩니다.

 실전에서는 Swift에서 기존 Objective-C로 작성되어 있는 라이브러리를 사용하기 위해서라도 Objective-C는 반쯤 현역으로 사용됩니다. 
 프로젝트 내에서 대부분의 코드는 Swift로 작성되지만, Objective-C 기반으로 작성되어 있는 기존 코드가 상당수이기 때문에, Swift가 정착된 후에도 한동안 Objective-C의 사용은 계속될 것입니다.

 현재는 많은 라이브러리가 Swift로 재작성되거나 Swift만으로 작성되고 있으며 Objective-C로 작성된 라이브러리라고 해도 Xcode 등의 IDE가 Swift에서 바로 사용할 수 있도록 적절히 처리해주기 때문에, Objective-C로 만들어진 라이브러리를 직접 수정할 일만 없다면 Objective-C를 전혀 몰라도 Swift로 작성하는데에 아무런 문제가 없습니다. 
 굳이 신규 프로젝트를 Objective-C로 진행하는 경우는 거의 없으므로 Swift를 주력 언어로 사용한다면 Objective-C는 코드 리딩 정도만 할 줄 알면 충분합니다. 
 (어차피 Swift나 Obj-C나 Cocoa Framework 기반이라 코드 리딩을 위해 별도로 공부할 필요가 없습니다.)
 
 Swift를 공식적으로 지원하는 통합개발환경으로는 대표적으로 Apple의 Xcode가 있습니다.
{% endhighlight %}

{% highlight html %}
var myNumber = 10 
// myNumber라는 이름의 변수를 생성했으며, 숫자 10을 할당합니다.
var myNumber: Int = 10 
// 위와 같이 초깃값이 존재하는 경우 컴파일러가 추론하므로 데이터 타입을 명시할 필요 없습니다.
종류 : Bool, Character, Int, Double, String, Void
※ 주의 x= 10 // 오류! '='옆에는 공백이 있어야합니다.

일반적으로 초깃값을 주지 않을 경우에만 자료형을 씁니다.
let meaningOfLife = 42  // Int형으로 타입 추론됩니다.
let pi = 3.141592       // Double형으로 추론됩니다.
let anotherPi = 3 + 0.14159 // Double형으로 추론됩니다.
{% endhighlight %}

#### Int
{% highlight html %}
정수 데이터 타입
- 정수(수점이 없는 수)를 저장하는 데 사용합니다.
  └ 양수, 음수, 영(0) 값을 담을 수 있는 부호있는(signed) 정수
  └ 영(0)과 양수만 담을 수 있는 부호 없는(unsigned) 정수
- 8비트, 16비트, 32비트, 64비트 정수를 지원합니다.
  └ Int8, Int16, Int32, Int64 타입
- 부호없는 정수
  └ UInt8, UInt16, UInt32, UInt64 타입
- 애플은 특정 크기의 데이터 타입보다 Int 데이터 타입을 권장합니다.
  └ Int 데이터 타입은 해당 코드가 실행되는 플랫폼에 맞는 정수 크기를 사용합니다.
  └ var myAge : Int = 20 // 초깃값 20이 있으므로 : Int는 일반적으로 생략합니다.
- 32비트 부호있는 정수 데이터 타입에 대한 최솟값과 최댓값을 출력합니다.
- \(출력하고 싶은 변수 또는 상수)
  └ print("Int32 Min = \(Int32.min) Int32 Max = \(Int32.max)")
  └ Int32 Min = -2147483648 Int32 Max = 2147483647
{% endhighlight %}


#### Double
{% highlight html %}
부동 소수점 데이터 타입
- 소수점이 있는 숫자입니다.
  └ 4353.1223
- Float와 Double 타입을 제공합니다.
- Double 타입
  └ 64비트로 부동 소수점 수를 저장, 소수점 15자리 정확도
  └ 32비트로 부동 소수점 수를 저장, 소수점 6자리 정확도
- Double형이 기본
- var myWeight : Double
- var myWeight : Double = 58.5 // 초깃값 58.5이 있으므로 : Double은 일반적으로 생략합니다.
{% endhighlight %}


#### Bool
{% highlight html %}
부울 데이터 타입
- 참 또는 거짓(1 또는 0) 조건을 처리할 데이터 타입
- Boolean 데이터 타입을 처리하기 위하여 두 개의 불리언 상수값(true/false) 사용합니다.
  └ var orangesAreOrange : Bool
  └ var orangesAreOrange : Bool = true // 초깃값 true가 있으므로 : Bool은 일반적으로 생략합니다.
{% endhighlight %}

#### Character
{% highlight html %}
문자 데이터 타입
- 문자, 숫자, 문장 부호, 심볼 같은 유니코드(Unicode) 문자 하나를 저장합니다.
  └ 스위프트에서의 문자들은 문자소 묶음(grapheme cluster)의 형태로 저장합니다.
    (문자소 묶음은 하나의 문자를 표현하기 위하여 유니코드 코드 값들로 이루어짐)
- var 변수명: Character = "초깃값"
※ 주의 : 초깃값은 작은 따옴표가 아니고 큰 따옴표입니다.
  └ var myChar1 : Character
  └ var myChar2 : Character = ":"
  └ var myChar3 : Character = "X" // : Character 생략 불가, 생략하면 String 형입니다.
    (유니코드를 이용하여 변수에 문자 'X'를 할당)
    (var myChar4 = "\u{0058}"
{% endhighlight %}

#### String
{% highlight html %}
문자열 데이터 타입
 - 단어나 문장을 구성하는 일련의 문자입니다.
 - 저장, 검색, 비교, 문자열 연결, 수정 등의 기능을 포함합니다.
 - 문자열 보간(string interpolation)을 사용하여 문자열과 변수, 상수, 표현식, 함수 호출의 조합으로 만들 수도 있습니다.
   └ var userName : String = "John" // : String 생략하는 것이 일반적임
     var inboxCount = 25
     let maxCount = 100
     var message = "\(userName) has \(inboxCount) message. Message capacity remaining is \(maxCount - inboxCount)"
     print(message)
     RESULT - John has 25 message. Message capacity remaining is 75
{% endhighlight %}

#### EscapeSequence
{% highlight html %}
특수 문자 / 이스케이프 
- 표준 문자 트뿐만 아니라 문자열에 개행, 탭, 또는 유니코드 값과 같은 항목을 지정할 수 있는 여러 특수 문자도 있습니다.
- 이스케이프 시퀀스(Escape Sequence)
- 특수 문자들은 역슬래시를 접두어로 하여 구별합니다.
  └ var newLine = "\n" // newLine
- 역슬래시로 시작되는 모든 문자는 특수 문자로 간주합니다.
- 역슬래시 문자 자체
  └ var backslash = "\\"
- 일반적으로 많이 사용되는 특수 문자
└ \n ― 개행
└ \r ― 캐리지 리턴(carriage return)
└ \t ― 수평 탭
└ \\ ― 역슬래시
└ \" ― 큰따옴표(문자열 선언부에 큰따옴표를 쓰고 싶을 경우에 사용됨)
└ \' ― 작은따옴표(문자열 선언부에 작은따옴표를 쓰고 싶을 경우에 사용됨)
└ \u{nn} ― nn 위치에 유니코드 문자를 표현하는 두 개의 16진수가 배치되는 1바이트 유니코드 스칼라
└ \u{nnnn} ― nnnn 위치에 유니코드 문자를 표현하는 네 개의 16진수가 배치되는 2바이트 유니코드 스칼라
└ \U{nnnnnnnn} ― nnnnnnnn 위치에 유니코드 문자를 표현하는 네 개의 16진수가 배치되는 4바이트 유니코드 스칼라
{% endhighlight %}

#### Var
{% highlight html %}
변수
- 기본적으로 변수(variable)는 프로그램에서 사용될 데이터를 저장하기 위한 메모리 공간
- 변수에 할당된 값은 변경 가능
  └ var myVariable = 10 // : Int형 생략
  └ var x = 0.0, y = 0.0, z = 0.0
{% endhighlight %}

#### Let
{% highlight html %}
상수
- 상수(constant)는 데이터 값을 저장하기 위하여 메모리 내의 명명된 공간을 제공한다는 점에서 변수와 비슷합니다.
- 어떤 값이 한번 할당되면 이후에 변경될 수 없습니다.
- 상수는 코드 내에서 반복적으로 사용되는 값이 있을 경우에 유용합니다.
- 코드 내에서 반복적으로 사용되는 특정 값을 매번 사용하는 것보다, 그 값을 상수에 할당한 다음 코드 내에서 참조하면 코드 읽기가 더 쉬워집니다.
  └ let maximumNumber = 10
  └ let π = 3.14159
  └ let �� = "dogcow" // \[Edit]-\[Emoji & Symbols]
- 변수나 상수명은 영문자, 숫자, Unicode(이모티콘, 중국어, 한글….)도 가능합니다.
{% endhighlight %}

#### Var-Let
{% highlight html %}
상수와 변수 선언하기
- 변수는 var 키워드를 이용하여 선언되며, 변수를 생성할 때에 값을 가지고 초기화할 수도 있습니다.
  └ var userCount = 10
  └ var userCount : Int?
- 상수는 let 키워드를 사용하여 선언합니다.
  └ 선언하는 시점에서 상수에 값이 할당되어 초기화되고, 할당된 값을 수정할 수 없음
  └ let maxUserCount = 20
- 애플은 코드의 효율성과 실행 성능을 높이기 위해서 변수(var)보다는 상수(let)를 사용하라고 권장합니다.
{% endhighlight %}

#### Tuple
{% highlight html %}
튜플
- 튜플은 스위프트 프로그래밍 언어에서 가장 강력한 기능 중 하나입니다.
- 여러 값을 하나의 개체에 일시적으로 묶는 방법입니다.
- 튜플에 저장되는 항목들은 어떠한 타입도 될 수 있으며, 저장된 값들이 모두 동일한 타입이어야 한다는 제약도 없습니다.
- let myTuple = (10, 12.1, "Hi")
- 튜플의 요소들은 여러 다른 방법들을 사용하여 접근할 수 있습니다.
- 특정 튜플 값은 인덱스 위치를 참조하면 간단하게 접근합니다.
  └ 맨 첫 번째 값은 인덱스 0
- 인덱스 2 위치를 추출하고 그 값을 새로운 문자열 변수에 할당합니다.
  └ let myTuple = (10, 12.1, "Hi")
    var myString = myTuple.2
    print(myString) //출력되는 값은? HI
- 단 한 줄의 코드로 튜플의 모든 값을 추출하여 변수 또는 상수에 할당합니다.
  └ let myTuple = (10, 12.1, "Hi")
  └ let (myInt, myFloat, myString) = myTuple
- 튜플의 값을 선택적으로 추출하는 데 사용될 수 있으며, 무시하고 싶은 값에 밑줄을 사용하면 그 값은 무시합니다.
  └ var (myInt, \_, myString) = myTuple // 부동 소수점 수는 무시
- 튜플을 생성할 때 각 값에 이름을 할당할 수도 있습니다.
  └ let myTuple = (count: 10, length: 12.1, message: "Hi")
- 튜플에 저장된 값에 할당된 이름은 각 값을 참조하는 데 사용합니다.
- myTuple 인스턴스의 message 값을 출력하는 코드입니다.
  └ print(myTuple.message) //?
- 튜플의 가장 강력한 점은 함수에서 여러 값들을 한 번에 반환하는 것입니다.
{% endhighlight %}

#### Optional
{% highlight html %}
옵셔널 타입
- 옵셔널(optional) 데이터 타입은 다른 프로그래밍 언어에는 없는 새로운 개념입니다.
- 값을 반환할 때 오류가 발생할 가능성이 있는 값은 옵셔널 타입이라는 객체로 감싸서 반환합니다.
  └ Int("100") 은 100이 아닌 Optional(100)을 리턴함,print(Int("100")), Int형 initializer
  └ Int("Hi") 은 정수 값을 반환할 수 없음, 아무런 값도 반환할 수 없다는 의미로 nil을 반환
  └ Swift에서 기본 자료형(Int, Double, String 등)은 nil값을 저장할 수 없음
  └ nil도 저장하려면 옵셔널 타입으로 선언해야 함
- 옵셔널 타입은 변수 또는 상수에 아무런 값이 할당되지 않는 상황을 안전하게 처리하기 위한 방법을 제공합니다.
- 옵셔널 타입 변수를 선언하기 위해서는 타입 선언부 뒤에 “?” 문자를 사용합니다.
  └ 주의 : 변수명 뒤에 “?”하는 것 아님
- index라는 이름의 옵셔널 Int 변수를 선언합니다.
  └ var index: Int?
  └ index 변수는 정수 값을 갖거나 아무 값도 갖지 않을 수 있음(nil)
{% endhighlight %}


#### Optional-Forced-Unwrapping
{% highlight html %}
옵셔널 타입 강제 언래핑(Forced-Unwrapping)
- 옵셔널 변수에 값이 있으면 옵셔널로 래핑되었다(wrapped)고 합니다.
- 옵셔널에 래핑된 값은 강제 언래핑(forced unwrapping)으로 풀어줍니다.

- 예시
  var x : Int? // 옵셔널 정수형 변수 x 선언
  x = 10 // 주석처리하면?
  print(x) // Optional(10)
  print(x!) // forced unwrapping해서 10이 나옴
  
- 예시
  var x : Int?
  x = 10
  if x != nil { // 주의!! x!=nil 공백여부 확인!!
    print(x!)
  } else {
    print("nil")
  }
  var x1 : Int?
  if x1 != nil {
    print(x1!)
  } else {
    print("nil")
  }
{% endhighlight %}

#### Optional-Binding
{% highlight html %}
옵셔널 바인딩(Binding)
- 강제 언래핑하는 또 다른 방법으로, 옵셔널 바인딩(optional binding)을 이용하여 옵셔널에 할당된 값을 임시 변수 또는 상수에 할당합니다.

- 예시
  if let constantname = optionalName{
      // 옵셔널 변수가 값이 있다면 언래핑해서 일반 상수 constantname에 대입하고 if문 실행
      // 값이 없다면 if문의 조건이 거짓이 되어 if문을 실행하지 않음
  }
  if var variablename = optionalName {
      // 옵셔널 변수가 값이 있다면 언래핑해서 일반 변수 variblename에 대입하고 if문 실행
      // 값이 없다면 if문의 조건이 거짓이 되어 if문을 실행하지 않음
  }
  
- 예시
- var x : Int?
  x = 10
  if let xx = x {
    print(xx)
  } else {
    print("nil")
  }
  var x1 : Int?
  if let xx = x1 {
    print(xx)
  } else {
    print("nil")
  }
  
- 여러 옵셔널을 언래핑 가능합니다.
- 여러 옵셔널 변수를 한번에 언래핑하는 방법은 콤마입니다.
- 예시
  var pet1: String?
  var pet2: String?
  pet1 = "cat"
  pet2 = "dog"
  if let firstPet = pet1, let secondPet = pet2 {
  print(firstPet, secondPet)
  } else {
  print("nil")
  }
  
- 예시2
  var x : Int?
  var y : Int?
  if let xx = x {
    print(xx)
  } else {
    print("nil")
  }
  if let yy = y {
    print(yy)
  } else {
    print("nil")
  }
{% endhighlight %}

#### Optional-Reason-For-Use
{% highlight html %}
옵셔널 사용 이유
- 옵셔널 타입만이 값을 갖지 않는다는 의미의 nil 값을 가질 수 있습니다.
- nil 값을 옵셔널이 아닌 변수나 상수에 할당할 수 없음
- 예시
  var myInt = nil // error
  var myInt : Int? = nil // OK
  var myInt : Int? // OK, 위와 같은 코드
- 옵셔널 변수는 초기화하지 않으면 자동으로 nil로 초기화
- 예시
  var mystring : String = nil // 유효하지 않은 코드
  let myConstant = nil // 유효하지 않은 코드
{% endhighlight %}


#### Nil
{% highlight html %}
nil
- 옵셔널 변수에 nil을 할당하면 값이 없는 상태가 됩니다.
- 예시
  var serverResponseCode: Int? = 404
  // serverResponseCode contains an actual Int value of 404
  serverResponseCode = nil
  // serverResponseCode now contains no value
  
- 상수나 변수가 값이 없는 상태가 존재한다면 옵셔널 타입으로 선언해야 합니다.
- 옵셔널 변수에 초깃값을 할당하지 않으면 자동으로 nil이 할당됨
- 예시
  var surveyAnswer: String?
  // surveyAnswer is automatically set to nil
{% endhighlight %}

####
{% highlight html %}
상수


{% endhighlight %}

####
{% highlight html %}
상수


{% endhighlight %}

####
{% highlight html %}
상수


{% endhighlight %}

####
{% highlight html %}
상수


{% endhighlight %}

####
{% highlight html %}
상수


{% endhighlight %}

---

## Parameters

매개변수 코드입니다.

{% highlight html %}
func add(jyh: Int, yhj: Int) -> Int {               // 외부 매개변수명 생략하면 내부 매개변수명이 외부 매개변수명까지 겸함
    return(jyh+yhj)
}
print(add(jyh:100, yhj:200))

func add(first jyh: Int, second yhj: Int) -> Int {  // 외부 매개변수명(first, second): 호출할 때 사용, 내부 매개변수명(jyh, yhj): 함수 내부에서 사용
    return(jyh+yhj)
}
print(add(first:100, second200))

func add(_ jyh: Int, _ yhj: Int) -> Int {           // 외부 매개변수명 생략(\_) 한다는 의미, 다른 언어처럼 호출 가능하지만 추천 X
    return(jyh+yhj)
}
print(add(100, 200))

func add(_ jyh: Int, with yhj: Int) -> Int {        // 첫번째 외부 매개변수명만(\_) 생략하는 경우가 많음, Objective-C언어의 호출 방식이 이러함
                                                    // 두번째 외부 매개변수부터는(with) 외부 매개변수 사용, 제일 많이 사용하는 방법
    return(jyh+yhj)
}
print(add(100, with:200))

----- RESULT -----
300
300
300
300

{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="https://yonghoon-jung.github.io/assets/images/1-1-parameter.PNG" alt="Alt Text">
        <figcaption class="caption">Parameter Code</figcaption>
    </div>

    <div class="toright">
        <p>
        함수 정의부의 값을 매개변수라 부르고, 호출시의 값은 아규먼트라고 부릅니다.
        </p>
    </div>
</div>

## Four-Fundamental-Rules-Of-Arithmetics

가감승제 코드입니다.<br>
덧셈, 뺄셈, 곱셈, 나눗셈, 나머지를 구하는 예제.

{% highlight html %}
func sss(a: Int, b: Int) -> (sum: Int,sub: Int, mul: Int, div: String, rem: Int) {
    let sum = a+b
    let sub = a-b
    let mul = a\*b
    let div = String(format: "%.6", Double(a)/Double(b))
    let rem = a%b
    return (sum, sub, mul, div, rem)
}

var result = sss(a:30,b:22)

print(result.sum)
print(result.sub)
print(result.mul)
print(result.div)
print(result.rem)

----- RESULT -----
52
8
660
1.363636
8

{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="https://yonghoon-jung.github.io/assets/images/1-2-gagam.PNG" alt="Alt Text">
        <figcaption class="caption">Four-Fundamental-Rules-Of-Arithmetics Code</figcaption>
    </div>

    <div class="toright">
        <p>
        가감승제
        </p>
    </div>
</div>

## Method

기본적인 함수 코드입니다.
임의의 개수의 정수 값의 합을 출력하는 함수입니다.

**Image** on the left and **Text** on the right:

{% highlight html %}
func add(numbers: Int...) {
    var i = 0
    for int in numbers {
        i = i + int
    }
    print(i)
}

add(numbers: 1,2,3,4,5)
add(numbers: 1,1,1,1,1)
add(numbers: 2,2,2,2,2)
add(numbers: 5,5,5,5,5)
add(numbers: 1,1,2,2,3)

----- RESULT -----
15
5
10
25
9

{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="https://yonghoon-jung.github.io/assets/images/1-3-method.PNG" alt="Alt Text">
        <figcaption class="caption">Method Code</figcaption>
    </div>

    <div class="toright">
        <p>
        함수 정의부의 값을 매개변수라 부르고, 호출시의 값은 아규먼트라고 부릅니다.<br><br>
        func [함수명] ([매개변수 이름]: [매개변수 타입], [매개변수 이름]: [매개변수 타입],...) -> [반환값 타입] {<br>
            [함수 코드]<br>
        }<br><br>
        [func] - 함수라는 것을 스위프트 컴파일러에게 알려주는 키워드<br>
        [함수명] - 함수에 할당되는 이름<br>
        [매개변수 이름] - 함수 코드 내에서 참조되는 매개변수의 이름<br>
        [매개변수 타입] - 함수에 전달되는 매개변수의 타입<br>
        [반환값 타입] - 함수가 반환하는 결과에 대한 데이터 타입. 반환하지 않으면(Void) 반환값 타입(Void)과 \->는 생략가능
        </p>
    </div>
</div>


## Inout

Swift는 기본적으로 call by value 입니다.<br>
call by reference를 구현하려면 inout 매개변수를 사용하면 됩니다.

**Image** on the left and **Text** on the right:

{% highlight html %}
var myValue = 10
func doubleValue (value: inout Int) -> Int {
    value += value
    return(value)
}
print(myValue)
print(doubleValue(value: $myValue))
print(myValue)

----- RESULT -----
10
20
20
{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="https://yonghoon-jung.github.io/assets/images/1-4-inout.pNG" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>

    <div class="toright">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>

## Side-by-side

Like the [Medium](https://medium.com/) component.

**Image** on the left and **Text** on the right:

{% highlight html %}
<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div> "도레미파솔라"

    <div class="toright">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>
{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>

    <div class="toright">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>

**Text** on the left and **Image** on the right:

{% highlight html %}
<div class="side-by-side">
    <div class="toleft">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>

    <div class="toright">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>
</div>
{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>

    <div class="toright">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>
</div>

---

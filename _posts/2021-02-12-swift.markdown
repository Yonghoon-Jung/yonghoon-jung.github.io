---
title: "Swift 기초 문법"
layout: post
date: 2021-02-13 19:43
image: /assets/images/markdown.jpg
headerImage: false
tag:
- swift
- parameter
- 매개변수
- 가감승제
- method
- inout
category: blog
author: Yonghoon-Jung
description: Markdown summary with different options
---

## Summary:
Swift언어의 기초 문법을 정리해 놓음으로 문법에 대한 접근이 용이하도록 작성한 게시글입니다.<br>
This is a posting that summarizes the basic grammar of the Swift language to facilitate access to grammar.

#### Table of Contents
- [Grammer](#grammer) 문법
- [Parameters](#parameters) 매개변수
- [Four-Fundamental-Rules-Of-Arithmetics](#four-fundamental-rules-of-arithmetics) 가감승제
- [Method](#method) 함수
- [Inout](#inout) 인아웃

#### External Elements
- [Gist](#gist)
- [Codepen](#codepen)
- [Slideshare](#slideshare)
- [Videos](#videos)

---

## Grammer

#### Table of Contents
- [Swift](#swift) 문법
- [Int](#int) 정수형 데이터 타입
- [Double](#double) 부동소수점 데이터 타입
- [Bool](#bool) 부울 데이터 타입
- [Inout](#inout) 인아웃

#### Swift

<span class="grammer">Paragraphs can be written like so. A paragraph is the basic block of Markdown. A paragraph is what text will turn into when there is no reason it should become anything else.</span>

{% highlight html %}
var myNumber = 10 
// myNumber라는 이름의 변수를 생성했으며, 숫자 10을 할당합니다.
var myNumber: Int = 10 
// 위와 같이 초깃값이 존재하는 경우 컴파일러가 추론하므로 데이터 타입을 명시할 필요 없습니다.
종류 : Bool, Character, Int, Double, String, Void
※ 주의 x= 10 // 오류! '='옆에는 공백이 있어야합니다.

일반적으로 초깃값을 주지 않을 경우에만 자료형을 씁니다.
let meaningOfLife = 42  // Int형으로 타입 추론됩니다.
let pi = 3.141592       // Double형으로 추론됩니다.
let anotherPi = 3 + 0.14159 // Double형으로 추론됩니다.
{% endhighlight %}

#### Int
{% highlight html %}
정수 데이터 타입
- 정수(수점이 없는 수)를 저장하는 데 사용합니다.
  └ 양수, 음수, 영(0) 값을 담을 수 있는 부호있는(signed) 정수
  └ 영(0)과 양수만 담을 수 있는 부호 없는(unsigned) 정수
- 8비트, 16비트, 32비트, 64비트 정수를 지원합니다.
  └ Int8, Int16, Int32, Int64 타입
- 부호없는 정수
  └ UInt8, UInt16, UInt32, UInt64 타입
- 애플은 특정 크기의 데이터 타입보다 Int 데이터 타입을 권장합니다.
  └ Int 데이터 타입은 해당 코드가 실행되는 플랫폼에 맞는 정수 크기를 사용합니다.
  └ var myAge : Int = 20 // 초깃값 20이 있으므로 : Int는 일반적으로 생략합니다.
- 32비트 부호있는 정수 데이터 타입에 대한 최솟값과 최댓값을 출력합니다.
- \(출력하고 싶은 변수 또는 상수)
  └ print("Int32 Min = \(Int32.min) Int32 Max = \(Int32.max)")
  └ Int32 Min = -2147483648 Int32 Max = 2147483647
{% endhighlight %}


#### Double
{% highlight html %}
부동 소수점 데이터 타입
- 소수점이 있는 숫자입니다.
  └ 4353.1223
- Float와 Double 타입을 제공합니다.
- Double 타입
  └ 64비트로 부동 소수점 수를 저장, 소수점 15자리 정확도
  └ 32비트로 부동 소수점 수를 저장, 소수점 6자리 정확도
- Double형이 기본
- var myWeight : Double
- var myWeight : Double = 58.5 // 초깃값 58.5이 있으므로 : Double은 일반적으로 생략합니다.
{% endhighlight %}


#### Bool
{% highlight html %}
부울 데이터 타입
- 참 또는 거짓(1 또는 0) 조건을 처리할 데이터 타입
- Boolean 데이터 타입을 처리하기 위하여 두 개의 불리언 상수값(true/false) 사용합니다.
  └ var orangesAreOrange : Bool
  └ var orangesAreOrange : Bool = true // 초깃값 true가 있으므로 : Bool은 일반적으로 생략합니다.
{% endhighlight %}

#### Character
{% highlight html %}
문자 데이터 타입
- 문자, 숫자, 문장 부호, 심볼 같은 유니코드(Unicode) 문자 하나를 저장합니다.
  └ 스위프트에서의 문자들은 문자소 묶음(grapheme cluster)의 형태로 저장합니다.
    (문자소 묶음은 하나의 문자를 표현하기 위하여 유니코드 코드 값들로 이루어짐)
- var 변수명: Character = "초깃값"
※ 주의 : 초깃값은 작은 따옴표가 아니고 큰 따옴표입니다.
  └ var myChar1 : Character
  └ var myChar2 : Character = ":"
  └ var myChar3 : Character = "X" // : Character 생략 불가, 생략하면 String 형입니다.
    (유니코드를 이용하여 변수에 문자 'X'를 할당)
    (var myChar4 = "\u{0058}"
{% endhighlight %}

#### String
{% highlight html %}
문자열 데이터 타입
 - 단어나 문장을 구성하는 일련의 문자입니다.
 - 저장, 검색, 비교, 문자열 연결, 수정 등의 기능을 포함합니다.
 - 문자열 보간(string interpolation)을 사용하여 문자열과 변수, 상수, 표현식, 함수 호출의 조합으로 만들 수도 있습니다.
   └ var userName : String = "John" // : String 생략하는 것이 일반적임
   └ var inboxCount = 25
   └ let maxCount = 100
   └ var message = "\(userName) has \(inboxCount) message. Message capacity remaining is \(maxCount - inboxCount)"
   └ print(message)
   └ RESULT - John has 25 message. Message capacity remaining is 75
{% endhighlight %}


{% highlight html %}


{% endhighlight %}

---

## Parameters

매개변수 코드입니다.

{% highlight html %}
func add(jyh: Int, yhj: Int) -> Int {               // 외부 매개변수명 생략하면 내부 매개변수명이 외부 매개변수명까지 겸함
    return(jyh+yhj)
}
print(add(jyh:100, yhj:200))

func add(first jyh: Int, second yhj: Int) -> Int {  // 외부 매개변수명(first, second): 호출할 때 사용, 내부 매개변수명(jyh, yhj): 함수 내부에서 사용
    return(jyh+yhj)
}
print(add(first:100, second200))

func add(_ jyh: Int, _ yhj: Int) -> Int {           // 외부 매개변수명 생략(\_) 한다는 의미, 다른 언어처럼 호출 가능하지만 추천 X
    return(jyh+yhj)
}
print(add(100, 200))

func add(_ jyh: Int, with yhj: Int) -> Int {        // 첫번째 외부 매개변수명만(\_) 생략하는 경우가 많음, Objective-C언어의 호출 방식이 이러함
                                                    // 두번째 외부 매개변수부터는(with) 외부 매개변수 사용, 제일 많이 사용하는 방법
    return(jyh+yhj)
}
print(add(100, with:200))

----- RESULT -----
300
300
300
300

{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="https://yonghoon-jung.github.io/assets/images/1-1-parameter.PNG" alt="Alt Text">
        <figcaption class="caption">Parameter Code</figcaption>
    </div>

    <div class="toright">
        <p>
        함수 정의부의 값을 매개변수라 부르고, 호출시의 값은 아규먼트라고 부릅니다.
        </p>
    </div>
</div>

## Four-Fundamental-Rules-Of-Arithmetics

가감승제 코드입니다.<br>
덧셈, 뺄셈, 곱셈, 나눗셈, 나머지를 구하는 예제.

{% highlight html %}
func sss(a: Int, b: Int) -> (sum: Int,sub: Int, mul: Int, div: String, rem: Int) {
    let sum = a+b
    let sub = a-b
    let mul = a\*b
    let div = String(format: "%.6", Double(a)/Double(b))
    let rem = a%b
    return (sum, sub, mul, div, rem)
}

var result = sss(a:30,b:22)

print(result.sum)
print(result.sub)
print(result.mul)
print(result.div)
print(result.rem)

----- RESULT -----
52
8
660
1.363636
8

{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="yonghoon-jung.github.io/assets/images/1-2-gagam.PNG" alt="Alt Text">
        <figcaption class="caption">Four-Fundamental-Rules-Of-Arithmetics Code</figcaption>
    </div>

    <div class="toright">
        <p>
        가감승제
        </p>
    </div>
</div>

## Method

기본적인 함수 코드입니다.
임의의 개수의 정수 값의 합을 출력하는 함수입니다.

**Image** on the left and **Text** on the right:

{% highlight html %}
func add(numbers: Int...) {
    var i = 0
    for int in numbers {
        i = i + int
    }
    print(i)
}

add(numbers: 1,2,3,4,5)
add(numbers: 1,1,1,1,1)
add(numbers: 2,2,2,2,2)
add(numbers: 5,5,5,5,5)
add(numbers: 1,1,2,2,3)

----- RESULT -----
15
5
10
25
9

{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="yonghoon-jung.github.io/assets/images/1-3-method.PNG" alt="Alt Text">
        <figcaption class="caption">Method Code</figcaption>
    </div>

    <div class="toright">
        <p>
        함수 정의부의 값을 매개변수라 부르고, 호출시의 값은 아규먼트라고 부릅니다.<br><br>
        func [함수명] ([매개변수 이름]: [매개변수 타입], [매개변수 이름]: [매개변수 타입],...) -> [반환값 타입] {<br>
            [함수 코드]<br>
        }<br><br>
        [func] - 함수라는 것을 스위프트 컴파일러에게 알려주는 키워드<br>
        [함수명] - 함수에 할당되는 이름<br>
        [매개변수 이름] - 함수 코드 내에서 참조되는 매개변수의 이름<br>
        [매개변수 타입] - 함수에 전달되는 매개변수의 타입<br>
        [반환값 타입] - 함수가 반환하는 결과에 대한 데이터 타입. 반환하지 않으면(Void) 반환값 타입(Void)과 \->는 생략가능
        </p>
    </div>
</div>


## Inout

Swift는 기본적으로 call by value 입니다.<br>
call by reference를 구현하려면 inout 매개변수를 사용하면 됩니다.

**Image** on the left and **Text** on the right:

{% highlight html %}
var myValue = 10
func doubleValue (value: inout Int) -> Int {
    value += value
    return(value)
}
print(myValue)
print(doubleValue(value: $myValue))
print(myValue)

----- RESULT -----
10
20
20
{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="yonghoon-jung.github.io/assets/images/1-4-inout.pNG" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>

    <div class="toright">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>

## Side-by-side

Like the [Medium](https://medium.com/) component.

**Image** on the left and **Text** on the right:

{% highlight html %}
<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div> "도레미파솔라"

    <div class="toright">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>
{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>

    <div class="toright">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>
</div>

**Text** on the left and **Image** on the right:

{% highlight html %}
<div class="side-by-side">
    <div class="toleft">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>

    <div class="toright">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>
</div>
{% endhighlight %}

<div class="side-by-side">
    <div class="toleft">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
    </div>

    <div class="toright">
        <img class="image" src="{{ site.url }}/{{ site.picture }}" alt="Alt Text">
        <figcaption class="caption">Photo by John Doe</figcaption>
    </div>
</div>

---

## Star

You can give evidence to a post. Just add the tag to the markdown file.

{% highlight raw %}
star: true
{% endhighlight %}

---

## Especial Breaker

You can add a especial *hr* to your text.

{% highlight html %}
<div class="breaker"></div>
{% endhighlight %}

<div class="breaker"></div>

---

## Spoiler

You can add an especial hidden content that appears on hover.

{% highlight html %}
<div class="spoiler"><p>your content</p></div>
{% endhighlight %}

<div class="spoiler"><p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></div>

---

## Gist

You can add Gists from github.

{% highlight raw %}
{ % gist sergiokopplin/91ff4220480727b47224245ee2e9c291 % }
{% endhighlight %}

{% gist sergiokopplin/91ff4220480727b47224245ee2e9c291 %}

---

## Codepen

You can add Pens from Codepen.

{% highlight html %}
<p data-height="268" data-theme-id="0" data-slug-hash="gfdDu" data-default-tab="result" data-user="chriscoyier" class='codepen'>
    See the Pen <a href='https://codepen.io/chriscoyier/pen/gfdDu/'>Crappy Recreation of the Book Cover of *The Flame Alphabet*</a> by Chris Coyier (<a href='https://codepen.io/chriscoyier'>@chriscoyier</a>) on <a href='https://codepen.io'>CodePen</a>.
</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>
{% endhighlight %}

<p data-height="268" data-theme-id="0" data-slug-hash="gfdDu" data-default-tab="result" data-user="chriscoyier" class='codepen'>See the Pen <a href='https://codepen.io/chriscoyier/pen/gfdDu/'>Crappy Recreation of the Book Cover of *The Flame Alphabet*</a> by Chris Coyier (<a href='https://codepen.io/chriscoyier'>@chriscoyier</a>) on <a href='https://codepen.io'>CodePen</a>.</p>
<script async src="//assets.codepen.io/assets/embed/ei.js"></script>

---

## Slideshare

Add your presentations here!

{% highlight html %}
<iframe src="//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l" width="560" height="310" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>
{% endhighlight %}

<iframe src="//www.slideshare.net/slideshow/embed_code/key/hqDhSJoWkrHe7l" width="560" height="310" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>

---

## Videos

Do you want some videos? Youtube, Vimeo or Vevo? Copy the embed code and paste on your post!

**Example**

{% highlight html %}
<iframe width="560" height="310" src="https://www.youtube.com/embed/r7XhWUDj-Ts" frameborder="0" allowfullscreen></iframe>
{% endhighlight %}

<iframe width="560" height="310" src="https://www.youtube.com/embed/r7XhWUDj-Ts" frameborder="0" allowfullscreen></iframe>

[1]: https://daringfireball.net/projects/markdown/
[2]: https://www.fileformat.info/info/unicode/char/2163/index.htm
[3]: https://www.markitdown.net/
[4]: https://daringfireball.net/projects/markdown/basics
[5]: https://daringfireball.net/projects/markdown/syntax
[6]: https://kune.fr/wp-content/uploads/2013/10/ghost-blog.jpg
